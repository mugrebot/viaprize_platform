// Generated by @wagmi/cli@0.1.15 on 4/24/2023 at 4:45:05 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SubmissionAVLTree
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const submissionAvlTreeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'votes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addVotes',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'submitter', internalType: 'address', type: 'address' },
      { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'submissionText', internalType: 'string', type: 'string' },
      { name: 'threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'add_submission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'findSubmission',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSubmissions',
    outputs: [
      {
        name: '',
        internalType: 'struct SubmissionAVLTree.SubmissionInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'submissionText', internalType: 'string', type: 'string' },
          { name: 'votes', internalType: 'uint256', type: 'uint256' },
          { name: 'submitter', internalType: 'address', type: 'address' },
          { name: 'threshhold', internalType: 'uint256', type: 'uint256' },
          { name: 'funded', internalType: 'bool', type: 'bool' },
          { name: 'height', internalType: 'int256', type: 'int256' },
          { name: 'left', internalType: 'uint256', type: 'uint256' },
          { name: 'right', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getSubmission',
    outputs: [
      {
        name: '',
        internalType: 'struct SubmissionAVLTree.SubmissionInfo',
        type: 'tuple',
        components: [
          { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'submissionText', internalType: 'string', type: 'string' },
          { name: 'votes', internalType: 'uint256', type: 'uint256' },
          { name: 'submitter', internalType: 'address', type: 'address' },
          { name: 'threshhold', internalType: 'uint256', type: 'uint256' },
          { name: 'funded', internalType: 'bool', type: 'bool' },
          { name: 'height', internalType: 'int256', type: 'int256' },
          { name: 'left', internalType: 'uint256', type: 'uint256' },
          { name: 'right', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inOrderTraversal',
    outputs: [
      {
        name: '',
        internalType: 'struct SubmissionAVLTree.SubmissionInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'submissionText', internalType: 'string', type: 'string' },
          { name: 'votes', internalType: 'uint256', type: 'uint256' },
          { name: 'submitter', internalType: 'address', type: 'address' },
          { name: 'threshhold', internalType: 'uint256', type: 'uint256' },
          { name: 'funded', internalType: 'bool', type: 'bool' },
          { name: 'height', internalType: 'int256', type: 'int256' },
          { name: 'left', internalType: 'uint256', type: 'uint256' },
          { name: 'right', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'root',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setThresholdCrossed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'votes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'subVotes',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'submissionFunderBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'submissions',
    outputs: [
      { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'submissionText', internalType: 'string', type: 'string' },
      { name: 'votes', internalType: 'uint256', type: 'uint256' },
      { name: 'submitter', internalType: 'address', type: 'address' },
      { name: 'threshhold', internalType: 'uint256', type: 'uint256' },
      { name: 'funded', internalType: 'bool', type: 'bool' },
      { name: 'height', internalType: 'int256', type: 'int256' },
      { name: 'left', internalType: 'uint256', type: 'uint256' },
      { name: 'right', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'thresholdCrossed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'funder', internalType: 'address', type: 'address' },
      { name: 'balances', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateFunderBalance',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Eippy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eippyABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'score', internalType: 'uint16', type: 'uint16' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: '_contract', internalType: 'address', type: 'address' },
    ],
    name: 'createMessage',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'score', internalType: 'uint16', type: 'uint16' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: '_contract', internalType: 'address', type: 'address' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifySignature',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// YourContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const yourContractABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'submissionContract', internalType: 'address', type: 'address' },
      { name: 'verifierContract', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'NotAdmin' },
  { type: 'error', inputs: [], name: 'NotEnoughFunds' },
  { type: 'error', inputs: [], name: 'NotYourVote' },
  { type: 'error', inputs: [], name: 'RefundAlreadyClaimed' },
  { type: 'error', inputs: [], name: 'RefundDoesntExist' },
  { type: 'error', inputs: [], name: 'RewardsAlreadyDistributed' },
  { type: 'error', inputs: [], name: 'RewardsNotDistributed' },
  { type: 'error', inputs: [], name: 'SubmissionAlreadyMade' },
  { type: 'error', inputs: [], name: 'SubmissionDoesntExist' },
  { type: 'error', inputs: [], name: 'SubmissionPeriodActive' },
  { type: 'error', inputs: [], name: 'SubmissionPeriodNotActive' },
  { type: 'error', inputs: [], name: 'VotingPeriodActive' },
  { type: 'error', inputs: [], name: 'VotingPeriodNotActive' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PLATFORM_ADDRESS',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'score', internalType: 'uint16', type: 'uint16' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addFunds',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'submitter', internalType: 'address', type: 'address' },
      { name: 'submissionText', internalType: 'string', type: 'string' },
      { name: 'threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addSubmission',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'addressRefunded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'admins',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_previous_submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_new_submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'change_vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'check_refund_amount',
    outputs: [{ name: '_refundAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'claimRefund',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'distributed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'end_submission_period', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'end_voting_period', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'funderVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'funders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllSubmissions',
    outputs: [
      {
        name: '',
        internalType: 'struct SubmissionAVLTree.SubmissionInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'submissionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'submissionText', internalType: 'string', type: 'string' },
          { name: 'votes', internalType: 'uint256', type: 'uint256' },
          { name: 'submitter', internalType: 'address', type: 'address' },
          { name: 'threshhold', internalType: 'uint256', type: 'uint256' },
          { name: 'funded', internalType: 'bool', type: 'bool' },
          { name: 'height', internalType: 'int256', type: 'int256' },
          { name: 'left', internalType: 'uint256', type: 'uint256' },
          { name: 'right', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getGitcoinScore',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_submission_time',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'get_voting_time',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'gitcoin_scores',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'platform_reward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'refunded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_submission_time', internalType: 'uint256', type: 'uint256' }],
    name: 'start_submission_period',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_voting_time', internalType: 'uint256', type: 'uint256' }],
    name: 'start_voting_period',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'total_funds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'total_rewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_submissionHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'use_unused_votes',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_submissionHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link submissionAvlTreeABI}__.
 */
export function useSubmissionAvlTree(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: submissionAvlTreeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__.
 */
export function useSubmissionAvlTreeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof submissionAvlTreeABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: submissionAvlTreeABI, ...config } as UseContractReadConfig<
    typeof submissionAvlTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"findSubmission"`.
 */
export function useSubmissionAvlTreeFindSubmission<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'findSubmission'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'findSubmission', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'findSubmission',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'findSubmission', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"getAllSubmissions"`.
 */
export function useSubmissionAvlTreeGetAllSubmissions<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'getAllSubmissions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'getAllSubmissions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'getAllSubmissions',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'getAllSubmissions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"getSubmission"`.
 */
export function useSubmissionAvlTreeGetSubmission<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'getSubmission'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'getSubmission', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'getSubmission',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'getSubmission', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"inOrderTraversal"`.
 */
export function useSubmissionAvlTreeInOrderTraversal<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'inOrderTraversal'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'inOrderTraversal', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'inOrderTraversal',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'inOrderTraversal', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"root"`.
 */
export function useSubmissionAvlTreeRoot<TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'root'>>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'root', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: submissionAvlTreeABI, functionName: 'root', ...config } as UseContractReadConfig<
    typeof submissionAvlTreeABI,
    'root',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"submissionFunderBalances"`.
 */
export function useSubmissionAvlTreeSubmissionFunderBalances<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'submissionFunderBalances'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'submissionFunderBalances', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'submissionFunderBalances',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'submissionFunderBalances', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"submissions"`.
 */
export function useSubmissionAvlTreeSubmissions<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'submissions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'submissions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: submissionAvlTreeABI, functionName: 'submissions', ...config } as UseContractReadConfig<
    typeof submissionAvlTreeABI,
    'submissions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"thresholdCrossed"`.
 */
export function useSubmissionAvlTreeThresholdCrossed<
  TSelectData = ReadContractResult<typeof submissionAvlTreeABI, 'thresholdCrossed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof submissionAvlTreeABI, 'thresholdCrossed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: submissionAvlTreeABI,
    functionName: 'thresholdCrossed',
    ...config,
  } as UseContractReadConfig<typeof submissionAvlTreeABI, 'thresholdCrossed', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__.
 */
export function useSubmissionAvlTreeWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, TFunctionName>({
    abi: submissionAvlTreeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"addVotes"`.
 */
export function useSubmissionAvlTreeAddVotes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, 'addVotes'>['abi'],
        'addVotes'
      > & { functionName?: 'addVotes' }
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, 'addVotes'> & {
        abi?: never
        functionName?: 'addVotes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, 'addVotes'>({
    abi: submissionAvlTreeABI,
    functionName: 'addVotes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"add_submission"`.
 */
export function useSubmissionAvlTreeAddSubmission<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, 'add_submission'>['abi'],
        'add_submission'
      > & { functionName?: 'add_submission' }
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, 'add_submission'> & {
        abi?: never
        functionName?: 'add_submission'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, 'add_submission'>({
    abi: submissionAvlTreeABI,
    functionName: 'add_submission',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"setThresholdCrossed"`.
 */
export function useSubmissionAvlTreeSetThresholdCrossed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, 'setThresholdCrossed'>['abi'],
        'setThresholdCrossed'
      > & { functionName?: 'setThresholdCrossed' }
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, 'setThresholdCrossed'> & {
        abi?: never
        functionName?: 'setThresholdCrossed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, 'setThresholdCrossed'>({
    abi: submissionAvlTreeABI,
    functionName: 'setThresholdCrossed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"subVotes"`.
 */
export function useSubmissionAvlTreeSubVotes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, 'subVotes'>['abi'],
        'subVotes'
      > & { functionName?: 'subVotes' }
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, 'subVotes'> & {
        abi?: never
        functionName?: 'subVotes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, 'subVotes'>({
    abi: submissionAvlTreeABI,
    functionName: 'subVotes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"updateFunderBalance"`.
 */
export function useSubmissionAvlTreeUpdateFunderBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof submissionAvlTreeABI, 'updateFunderBalance'>['abi'],
        'updateFunderBalance'
      > & { functionName?: 'updateFunderBalance' }
    : UseContractWriteConfig<TMode, typeof submissionAvlTreeABI, 'updateFunderBalance'> & {
        abi?: never
        functionName?: 'updateFunderBalance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof submissionAvlTreeABI, 'updateFunderBalance'>({
    abi: submissionAvlTreeABI,
    functionName: 'updateFunderBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__.
 */
export function usePrepareSubmissionAvlTreeWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: submissionAvlTreeABI, ...config } as UsePrepareContractWriteConfig<
    typeof submissionAvlTreeABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"addVotes"`.
 */
export function usePrepareSubmissionAvlTreeAddVotes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'addVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: submissionAvlTreeABI,
    functionName: 'addVotes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'addVotes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"add_submission"`.
 */
export function usePrepareSubmissionAvlTreeAddSubmission(
  config: Omit<
    UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'add_submission'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: submissionAvlTreeABI,
    functionName: 'add_submission',
    ...config,
  } as UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'add_submission'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"setThresholdCrossed"`.
 */
export function usePrepareSubmissionAvlTreeSetThresholdCrossed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'setThresholdCrossed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: submissionAvlTreeABI,
    functionName: 'setThresholdCrossed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'setThresholdCrossed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"subVotes"`.
 */
export function usePrepareSubmissionAvlTreeSubVotes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'subVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: submissionAvlTreeABI,
    functionName: 'subVotes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'subVotes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link submissionAvlTreeABI}__ and `functionName` set to `"updateFunderBalance"`.
 */
export function usePrepareSubmissionAvlTreeUpdateFunderBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'updateFunderBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: submissionAvlTreeABI,
    functionName: 'updateFunderBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof submissionAvlTreeABI, 'updateFunderBalance'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eippyABI}__.
 */
export function useEippy(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: eippyABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eippyABI}__.
 */
export function useEippyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eippyABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof eippyABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: eippyABI, ...config } as UseContractReadConfig<
    typeof eippyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eippyABI}__ and `functionName` set to `"createMessage"`.
 */
export function useEippyCreateMessage<TSelectData = ReadContractResult<typeof eippyABI, 'createMessage'>>(
  config: Omit<
    UseContractReadConfig<typeof eippyABI, 'createMessage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: eippyABI, functionName: 'createMessage', ...config } as UseContractReadConfig<
    typeof eippyABI,
    'createMessage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eippyABI}__ and `functionName` set to `"verifySignature"`.
 */
export function useEippyVerifySignature<TSelectData = ReadContractResult<typeof eippyABI, 'verifySignature'>>(
  config: Omit<
    UseContractReadConfig<typeof eippyABI, 'verifySignature', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: eippyABI, functionName: 'verifySignature', ...config } as UseContractReadConfig<
    typeof eippyABI,
    'verifySignature',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link yourContractABI}__.
 */
export function useYourContract(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: yourContractABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__.
 */
export function useYourContractRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof yourContractABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof yourContractABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: yourContractABI, ...config } as UseContractReadConfig<
    typeof yourContractABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"PLATFORM_ADDRESS"`.
 */
export function useYourContractPlatformAddress<
  TSelectData = ReadContractResult<typeof yourContractABI, 'PLATFORM_ADDRESS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'PLATFORM_ADDRESS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'PLATFORM_ADDRESS', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'PLATFORM_ADDRESS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"addressRefunded"`.
 */
export function useYourContractAddressRefunded<
  TSelectData = ReadContractResult<typeof yourContractABI, 'addressRefunded'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'addressRefunded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'addressRefunded', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'addressRefunded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"admins"`.
 */
export function useYourContractAdmins<TSelectData = ReadContractResult<typeof yourContractABI, 'admins'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'admins', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'admins', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'admins',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"check_refund_amount"`.
 */
export function useYourContractCheckRefundAmount<
  TSelectData = ReadContractResult<typeof yourContractABI, 'check_refund_amount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'check_refund_amount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: yourContractABI,
    functionName: 'check_refund_amount',
    ...config,
  } as UseContractReadConfig<typeof yourContractABI, 'check_refund_amount', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"distributed"`.
 */
export function useYourContractDistributed<TSelectData = ReadContractResult<typeof yourContractABI, 'distributed'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'distributed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'distributed', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'distributed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"funderVotes"`.
 */
export function useYourContractFunderVotes<TSelectData = ReadContractResult<typeof yourContractABI, 'funderVotes'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'funderVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'funderVotes', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'funderVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"funders"`.
 */
export function useYourContractFunders<TSelectData = ReadContractResult<typeof yourContractABI, 'funders'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'funders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'funders', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'funders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"getAllSubmissions"`.
 */
export function useYourContractGetAllSubmissions<
  TSelectData = ReadContractResult<typeof yourContractABI, 'getAllSubmissions'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'getAllSubmissions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: yourContractABI,
    functionName: 'getAllSubmissions',
    ...config,
  } as UseContractReadConfig<typeof yourContractABI, 'getAllSubmissions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"getGitcoinScore"`.
 */
export function useYourContractGetGitcoinScore<
  TSelectData = ReadContractResult<typeof yourContractABI, 'getGitcoinScore'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'getGitcoinScore', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'getGitcoinScore', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'getGitcoinScore',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"get_submission_time"`.
 */
export function useYourContractGetSubmissionTime<
  TSelectData = ReadContractResult<typeof yourContractABI, 'get_submission_time'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'get_submission_time', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: yourContractABI,
    functionName: 'get_submission_time',
    ...config,
  } as UseContractReadConfig<typeof yourContractABI, 'get_submission_time', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"get_voting_time"`.
 */
export function useYourContractGetVotingTime<
  TSelectData = ReadContractResult<typeof yourContractABI, 'get_voting_time'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'get_voting_time', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'get_voting_time', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'get_voting_time',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"gitcoin_scores"`.
 */
export function useYourContractGitcoinScores<
  TSelectData = ReadContractResult<typeof yourContractABI, 'gitcoin_scores'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'gitcoin_scores', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'gitcoin_scores', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'gitcoin_scores',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"platform_reward"`.
 */
export function useYourContractPlatformReward<
  TSelectData = ReadContractResult<typeof yourContractABI, 'platform_reward'>,
>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'platform_reward', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'platform_reward', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'platform_reward',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"refunded"`.
 */
export function useYourContractRefunded<TSelectData = ReadContractResult<typeof yourContractABI, 'refunded'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'refunded', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'refunded', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'refunded',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"total_funds"`.
 */
export function useYourContractTotalFunds<TSelectData = ReadContractResult<typeof yourContractABI, 'total_funds'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'total_funds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'total_funds', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'total_funds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"total_rewards"`.
 */
export function useYourContractTotalRewards<TSelectData = ReadContractResult<typeof yourContractABI, 'total_rewards'>>(
  config: Omit<
    UseContractReadConfig<typeof yourContractABI, 'total_rewards', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({ abi: yourContractABI, functionName: 'total_rewards', ...config } as UseContractReadConfig<
    typeof yourContractABI,
    'total_rewards',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__.
 */
export function useYourContractWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof yourContractABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof yourContractABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, TFunctionName>({ abi: yourContractABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"addFunds"`.
 */
export function useYourContractAddFunds<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'addFunds'>['abi'],
        'addFunds'
      > & { functionName?: 'addFunds' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'addFunds'> & {
        abi?: never
        functionName?: 'addFunds'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'addFunds'>({
    abi: yourContractABI,
    functionName: 'addFunds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"addSubmission"`.
 */
export function useYourContractAddSubmission<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'addSubmission'>['abi'],
        'addSubmission'
      > & { functionName?: 'addSubmission' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'addSubmission'> & {
        abi?: never
        functionName?: 'addSubmission'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'addSubmission'>({
    abi: yourContractABI,
    functionName: 'addSubmission',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"change_vote"`.
 */
export function useYourContractChangeVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'change_vote'>['abi'],
        'change_vote'
      > & { functionName?: 'change_vote' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'change_vote'> & {
        abi?: never
        functionName?: 'change_vote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'change_vote'>({
    abi: yourContractABI,
    functionName: 'change_vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"claimRefund"`.
 */
export function useYourContractClaimRefund<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'claimRefund'>['abi'],
        'claimRefund'
      > & { functionName?: 'claimRefund' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'claimRefund'> & {
        abi?: never
        functionName?: 'claimRefund'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'claimRefund'>({
    abi: yourContractABI,
    functionName: 'claimRefund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"end_submission_period"`.
 */
export function useYourContractEndSubmissionPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'end_submission_period'>['abi'],
        'end_submission_period'
      > & { functionName?: 'end_submission_period' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'end_submission_period'> & {
        abi?: never
        functionName?: 'end_submission_period'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'end_submission_period'>({
    abi: yourContractABI,
    functionName: 'end_submission_period',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"end_voting_period"`.
 */
export function useYourContractEndVotingPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'end_voting_period'>['abi'],
        'end_voting_period'
      > & { functionName?: 'end_voting_period' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'end_voting_period'> & {
        abi?: never
        functionName?: 'end_voting_period'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'end_voting_period'>({
    abi: yourContractABI,
    functionName: 'end_voting_period',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"start_submission_period"`.
 */
export function useYourContractStartSubmissionPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'start_submission_period'>['abi'],
        'start_submission_period'
      > & { functionName?: 'start_submission_period' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'start_submission_period'> & {
        abi?: never
        functionName?: 'start_submission_period'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'start_submission_period'>({
    abi: yourContractABI,
    functionName: 'start_submission_period',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"start_voting_period"`.
 */
export function useYourContractStartVotingPeriod<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'start_voting_period'>['abi'],
        'start_voting_period'
      > & { functionName?: 'start_voting_period' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'start_voting_period'> & {
        abi?: never
        functionName?: 'start_voting_period'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'start_voting_period'>({
    abi: yourContractABI,
    functionName: 'start_voting_period',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"use_unused_votes"`.
 */
export function useYourContractUseUnusedVotes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof yourContractABI, 'use_unused_votes'>['abi'],
        'use_unused_votes'
      > & { functionName?: 'use_unused_votes' }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'use_unused_votes'> & {
        abi?: never
        functionName?: 'use_unused_votes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'use_unused_votes'>({
    abi: yourContractABI,
    functionName: 'use_unused_votes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"vote"`.
 */
export function useYourContractVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof yourContractABI, 'vote'>['abi'], 'vote'> & {
        functionName?: 'vote'
      }
    : UseContractWriteConfig<TMode, typeof yourContractABI, 'vote'> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof yourContractABI, 'vote'>({
    abi: yourContractABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__.
 */
export function usePrepareYourContractWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof yourContractABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: yourContractABI, ...config } as UsePrepareContractWriteConfig<
    typeof yourContractABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"addFunds"`.
 */
export function usePrepareYourContractAddFunds(
  config: Omit<UsePrepareContractWriteConfig<typeof yourContractABI, 'addFunds'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'addFunds',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'addFunds'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"addSubmission"`.
 */
export function usePrepareYourContractAddSubmission(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'addSubmission'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'addSubmission',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'addSubmission'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"change_vote"`.
 */
export function usePrepareYourContractChangeVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'change_vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'change_vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'change_vote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"claimRefund"`.
 */
export function usePrepareYourContractClaimRefund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'claimRefund'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'claimRefund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'claimRefund'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"end_submission_period"`.
 */
export function usePrepareYourContractEndSubmissionPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'end_submission_period'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'end_submission_period',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'end_submission_period'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"end_voting_period"`.
 */
export function usePrepareYourContractEndVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'end_voting_period'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'end_voting_period',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'end_voting_period'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"start_submission_period"`.
 */
export function usePrepareYourContractStartSubmissionPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'start_submission_period'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'start_submission_period',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'start_submission_period'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"start_voting_period"`.
 */
export function usePrepareYourContractStartVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'start_voting_period'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'start_voting_period',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'start_voting_period'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"use_unused_votes"`.
 */
export function usePrepareYourContractUseUnusedVotes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof yourContractABI, 'use_unused_votes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'use_unused_votes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'use_unused_votes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link yourContractABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareYourContractVote(
  config: Omit<UsePrepareContractWriteConfig<typeof yourContractABI, 'vote'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: yourContractABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof yourContractABI, 'vote'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >)
}
